#!/usr/bin/env python3

import base64
import collections
import datetime
import os
import sys

import xxhash
import itertools
import subprocess

from cc_pathlib import Path

def get_datetime(pth) :
	""" utilise exiftool pour trouver un date dans les métadonnées """
	""" TAG

    Extract information for the specified tag (eg. -CreateDate)."""
	ret = subprocess.run(["exiftool", str(pth)], stdout=subprocess.PIPE)
	for line in ret.stdout.decode('utf8', errors="replace").splitlines() :
		key, sep, value = line.partition(':')
		if 'Create Date' == key.strip() :
			try :
				return datetime.datetime.strptime(value.strip(), "%Y:%m:%d %H:%M:%S").strftime("%Y%m%d_%H%M%S")
			except ValueError :
				pass
	return None
	
def get_checksum(pth) :
	with pth.open("rb") as fid:
		with mmap.mmap(fid.fileno(), 0, prot=mmap.PROT_READ) as mmp :
			xx3 = xxhash.xxh3_128()
			xx3.update(mmp)
			hsh = xx3.digest()
			b32 = base64.b32encode(hsh).decode('ascii').rstrip('=')
	return b32, pth.stat().st_size

	# buf = pth.read_bytes()
	# hsh = blake3.blake3(buf).digest()
	# b32 = base64.b32encode(hsh).decode('ascii')
	# return b32, len(buf)

def are_file_same_inodev(a_pth, b_pth) :
	a_fst, b_fst = a_pth.stat(), b_pth.stat()

	if a_fst.st_ino == b_fst.st_ino and a_fst.st_dev == b_fst.st_dev :
		return True

def are_files_identical(a_pth, b_pth) :
	a_fst, b_fst = a_pth.stat(), b_pth.stat()

	if a_fst.st_size != b_fst.st_size :
		return False

	if a_fst.st_size < 2**28 : # 256 Mo
		return a_pth.read_bytes() == b_pth.read_bytes()

	with (
		a_pth.open('rb') as a_fid,
		b_pth.open('rb') as b_fid
	) :
		while True :
			a_bin = a_fid.read(2**26) # 64 Mo
			b_bin = b_fid.read(2**26)
			if a_bin != b_bin :
				return False
			if len(a_bin) < 2**26 :
				break
		return True

# ext_map = {
# 	'.jpg' : [".jpeg"],
# 	'.png' : [".png",],
# 	# '.gif' : [".gif", ".GIF"],
# 	'.mp4' : [".mp4",],
# 	'.mov' : [".mov",],
# }

for k, v_lst in ext_map.items() :
	for v in v_lst :
		rev_map[v] = k

class MemoriesRename() :
	
	""" on fait que le renaming, pas la gestion avancée des doublons """

	proc_set = {'.jpg', '.png', '.mp4', '.mov'}
	repl_map = {
		'.jpeg': '.jpg'
	}

	def __init__(self, base_dir:Path, dry_run:bool=True, do_recurse:bool=False) :

		self.base_dir = Path(base_dir).resolve()
		assert self.base_dir.is_dir()

		self.dry_run = dry_run
		self.do_recurse = do_recurse

		self.log_dir = (Path(os.environ['MEMORIES_root_DIR']) / "log" / "rename").make_dirs()
		self.log_pth = self.log_dir / f"{datetime.datetime.now():%Y%m%d_%H%M%S}.log"

		self.process_dir()

	def write_log(self, s) :
		if self.dry_run :
			print(s)
		else :
			with self.log_pth.open('at') as fid :
				fid.write(s + '\n')

	def process_dir(self, work_dir) :
		work_dir = Path(work_dir).resolve()

		q_set = set()
		d_lst = [self.base_dir,]

		while d_lst :
			self.base_dir = d_lst.pop(0)
			for src_pth in self.base_dir :
				if src_pth.is_file() :
					src_ext = src_pth.suffix.lower()
					dst_ext = self.repl_map.get(src_ext, src_ext)
					if dst_ext in self.proc_set :
						try :
							self.process_file(src_pth, dst_ext)
						except ValueError :
							q_set.add((src_pth, dst_ext))
				
				elif src_pth.is_dir() :
					if self.do_recurse :
						d_lst.append(src_pth)
					
	def process_file(self, src_pth, dst_ext) :

		dat = get_datetime(src_pth)
		hsh, siz = get_checksum(src_pth)

		if dat is None :
			dst_name = f"{src_pth.fname}_{hsh}{dst_ext}"
			if src_pth.name.endswith(f"_{hsh}{dst_ext}") :
				# on renomme pas ! ça a déjà été fait
				return
		else :
			dst_name = f"{dat}_{hsh[:6]}{dst_ext}"
			if dst_name == src_pth.name :
				# le nom qu'on veut donner, c'est le nom qu'il a déjà, pas besoin de le renommer
				return
		
		dst_pth = src_pth.parent / dst_name

		if dst_pth.is_file() :
			# il y a dejà un fichier au même endroit et qui a le même nom !
			if are_files_identical(src_pth, dst_pth) :
				# le fichier traité existe déjà sous un autre nom, on supprime ce premier
				if not self.dry_run :
					src_pth.unlink()
				self.write_log(f'{src_pth.relative_to(self.root_dir)} -X')
			else :
				# sinon, on lève une erreur, Houston, on a un problème
				self.write_log(f'{col_pth.relative_to(self.root_dir)} ?! {dst_pth.relative_to(self.root_dir)}')
				raise FileExistsError
		else :
			# il n'y a pas de fichier, on renomme
			if not self.dry_run :
				src_pth.rename(dst_pth)
			self.write_log(f'{src_pth.relative_to(self.root_dir)} -> {dst_pth.relative_to(self.root_dir)}')

if __name__ == '__main__' :
	
	import argparse
	
	pa = argparse.ArgumentParser(prog='memories_rename', description='give standard names for images based on exif dates and checksum')

	pa.add_argument('pth_lst', nargs='+', type=Path)
	pa.add_argument('-n', '--dry-run', action='store_true')
	pa.add_argument('-r', '--recurse', action='store_true')

	ap = pa.parse_args()

	for pth in ap.pth_lst :
		pth = pth.resolve()
		if pth.is_dir() :
			u = MemoriesRename(pth)
	
